// generated from rosidl_typesupport_opensplice_cpp/resource/msg__type_support.hpp.template

@#######################################################################
@# EmPy template for generating <msg>__type_support.hpp files
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecifiwcation)
@#    Parsed specification of the .msg file
@#  - subfolder (string)
@#    The subfolder / subnamespace of the message
@#    Either 'msg' or 'srv'
@#  - get_header_filename_from_msg_name (function)
@#######################################################################
@
#ifndef __@(spec.base_type.pkg_name)__@(subfolder)__dds_freertps__@(get_header_filename_from_msg_name(spec.base_type.type))__type_support__hpp__
#define __@(spec.base_type.pkg_name)__@(subfolder)__dds_freertps__@(get_header_filename_from_msg_name(spec.base_type.type))__type_support__hpp__

#include "@(spec.base_type.pkg_name)/@(subfolder)/@(get_header_filename_from_msg_name(spec.base_type.type))__struct.hpp"
//#include "@(spec.base_type.pkg_name)/@(subfolder)/dds_freertps/ccpp_@(spec.base_type.type)_.h"
#include "@(spec.base_type.pkg_name)/msg/dds_freertps/visibility_control.h"

namespace @(spec.base_type.pkg_name)
{

namespace @(subfolder)
{

namespace typesupport_opensplice_cpp
{

ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
/// Serialize the ROS message to CDR format.
/**
 * \param[in] ros_message The ROS message struct to convert.
 * \param[in] cdr_message The serialized message as a 32-bit blob.
 */
extern void serialize_ros_msg(
  const @(spec.base_type.pkg_name)::@(subfolder)::@(spec.base_type.type) & ros_message,
  uint32_t & cdr_message,
  uint8_t * buf,
  uint32_t size);

/*
ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
extern void register_type__@(spec.base_type.type)(
  DDS::DomainParticipant * participant,
  const char * type_name);

ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
extern void convert_ros_message_to_dds(
  const @(spec.base_type.pkg_name)::@(subfolder)::@(spec.base_type.type)& ros_message,
  @(spec.base_type.pkg_name)::@(subfolder)::dds_::@(spec.base_type.type)_& dds_message);

ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
extern void publish__@(spec.base_type.type)(
  DDS::DataWriter * topic_writer,
  const void * untyped_ros_message);

ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
extern void convert_dds_message_to_ros(
  const @(spec.base_type.pkg_name)::@(subfolder)::dds_::@(spec.base_type.type)_& dds_message,
  @(spec.base_type.pkg_name)::@(subfolder)::@(spec.base_type.type)& ros_message);

ROSIDL_TYPESUPPORT_FREERTPS_CPP_PUBLIC_@(spec.base_type.pkg_name)
extern bool take__@(spec.base_type.type)(
  DDS::DataReader * topic_reader,
  bool ignore_local_publications,
  void * untyped_ros_message,
  bool * taken);
*/

}  // namespace typesupport_opensplice_cpp

}  // namespace @(subfolder)

}  // namespace @(spec.base_type.pkg_name)

#endif  // __@(spec.base_type.pkg_name)__@(subfolder)__dds_freertps__@(get_header_filename_from_msg_name(spec.base_type.type))__type_support__hpp__
